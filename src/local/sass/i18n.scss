// Some things copied from WinJS with <3


// LTR mixin definition
.LTR(@rules) {
    html[dir='ltr'] & {
        @rules();
    }
}

// RTL mixin definition
.RTL(@rules) {
    html[dir='rtl'] & {
        @rules();
    }
}

// Use baseRTL for a root element of a control that needs rtl support
.baseRtl() {
    .RTL({
        direction: rtl;
        unicode-bidi: bidi-override;
    });
}

/*
    Common CSS property mixins with support for RTL.
    Use these mixins when you want to automatically create RTL versions of your properties.
    They are in alphabetical order (a-z).
*/

.border-color(@top, @right, @bottom, @left) {
    border-color: @top @right @bottom @left;
    .RTL({
        border-color: @top @left @bottom @right;
    })
}

.border-left(@width, @style, @color) {
    .LTR({
        border-left: @width @style @color;
    });
    .RTL({
        border-right: @width @style @color;
    });
}

.border-left-color(@color) {
    .LTR({
        border-left-color: @color;
    });
    .RTL({
        border-right-color: @color;
    });
}

.border-left-style(@style) {
    .LTR({
        border-left-style: @style;
    });
    .RTL({
        border-right-style: @style;
    });
}

.border-left-width(@width) {
    .LTR({
        border-left-width: @width;
    });
    .RTL({
        border-right-width: @width;
    });
}

.border-radius(@topLeft, @topRight, @bottomRight, @bottomLeft) {
    border-radius: @topLeft @topRight @bottomRight @bottomLeft;
    .RTL({
        border-radius: @topRight @topLeft @bottomLeft @bottomRight;
    });
}

.border-right(@width, @style, @color) {
    .LTR({
        border-right: @width @style @color;
    });
    .RTL({
        border-left: @width @style @color;
    });
}

.border-right-color(@color) {
    .LTR({
        border-right-color: @color;
    });
    .RTL({
        border-left-color: @color;
    });
}

.border-right-style(@style) {
    .LTR({
         border-right-style: @style;
    });
    .RTL({
        border-left-style: @style;
    });
}

.border-right-width(@width) {
    .LTR({
        border-right-width: @width;
    });
    .RTL({
        border-left-width: @width;
    });
}

.clear(@side) when not (@side = left) and not (@side = right) {
    clear: @side;
}

.clear(@side) when (@side = left) {
    .LTR({
        clear: @side;
    });
    .RTL({
        clear: right;
    });
}

.clear(@side) when (@side = right) {
    .LTR({
        clear: @side;
    });
    .RTL({
        clear: left;
    });
}

.float(@direction) when (@direction = left) {
    .LTR({
        float: left;
    });
    .RTL({
        float: right;
    });
}

.float(@direction) when (@direction = right) {
    .LTR({
        float: right;
    });
    .RTL({
        float: left;
    });
}

.left(@distance) {
    .LTR({
        left: @distance;
    });
    .RTL({
        right: @distance;
    });
}

.margin(@top, @right, @bottom, @left) {
    margin: @top @right @bottom @left;
    .RTL({
        margin: @top @left @bottom @right;
    });
}

.margin-left(@distance) {
    .LTR({
        margin-left: @distance;
    });
    .RTL({
        margin-right: @distance;
    });
}

.margin-right(@distance) {
   .LTR({
        margin-right: @distance;
    });
    .RTL({
        margin-left: @distance;
    });
}

.padding(@top, @right, @bottom, @left) {
    padding: @top @right @bottom @left;
    .RTL({
        padding: @top @left @bottom @right;
    })
}

.padding-left(@distance) {
    .LTR({
        padding-left: @distance;
    });
    .RTL({
        padding-right: @distance;
    });
}

.padding-right(@distance) {
    .LTR({
        padding-right: @distance;
    });
    .RTL({
        padding-left: @distance;
    });
}

.right(@distance) {
    .LTR({
        right: @distance;
    });
    .RTL({
        left: @distance;
    });
}

.text-align(@direction) when (@direction = left) {
    .LTR({
        text-align: left;
    });
    .RTL({
        text-align: right;
    });
}

.text-align(@direction) when (@direction = right) {
    .LTR({
        text-align: right;
    });
    .RTL({
        text-align: left;
    });
}

.box-shadow(@left, @etc) {
    .LTR({
        box-shadow: @left @etc;
    });

    .RTL({
        box-shadow: -@left @etc;
    });
}

.transform-rtl() {
    .LTR({
        transform: scaleX(1);
    });
    .RTL({
        transform: scaleX(-1);
    });
}

// only supported when ONLY left/right are declared
.transition-property(@direction) when (@direction = left) {
    .LTR({
        transition-property: left;
    });
    .RTL({
        transition-property: right;
    });
}
.transition-property(@direction) when (@direction = right) {
    .LTR({
        transition-property: right;
    });
    .RTL({
        transition-property: left;
    });
}